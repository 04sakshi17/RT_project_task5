{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Desktop\\\\task\\\\Chapter5\\\\src\\\\context\\\\ListsContext.js\",\n    _s = $RefreshSig$();\n\n// import { createContext, useCallback,useReducer} from 'react';\n// //import useDataFetching from '../hooks/useDataFetching';\n// export const ListsContext = createContext();\n//  const initialState = {\n//     lists: [],\n//     list:{},\n//     loading: true,\n//     error: '',\n//     };\n//      const reducer = (state, action) => {\n//          switch (action.type) {\n//          case 'GET_LISTS_SUCCESS':\n//          return {\n//          ...state,\n//          lists: action.payload,\n//          loading: false,\n//          };\n//          case 'GET_LISTS_ERROR':\n//          return {\n//         ...state,\n//         lists: [],\n//          loading: false,\n//          error: action.payload,\n//          };\n//          case 'GET_LIST_SUCCESS':\n//              return {\n//              ...state,\n//              list: action.payload,\n//              loading: false,\n//              };\n//              case 'GET_LIST_ERROR':\n//              return {\n//              ...state,\n//              list: {},\n//              loading: false,\n//              error: action.payload,\n//  };\n//          default:\n//         return state;\n//          }\n//          };\n//          export const ListsContextProvider = ({ children }) => {\n//             const [state, dispatch] = useReducer(reducer, initialState);\n//             const fetchLists = useCallback(async () => {\n//                try {\n//                    const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists`);\n//             const result = await data.json();\n//             if (result) {\n//             dispatch({ type: 'GET_LISTS_SUCCESS', \n//             payload: result });\n//             }\n//             } catch (e) {\n//             dispatch({ type: 'GET_LISTS_ERROR', \n//             payload: e.message });\n//             }\n//             }, [])\n//             //  const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists',\n//             //  );\n//             const fetchList = useCallback(async (listId) => {\n//                  try {\n//                  const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}`);\n//                  const result = await data.json();\n//                  if (result) {\n//                  dispatch({ type: 'GET_LIST_SUCCESS',\n//                  payload: result });\n//                  }\n//                  } catch (e) {\n//                 dispatch({ type: 'GET_LIST_ERROR', \n//                  payload: e.message });\n//                  }\n//                  }, [])\n//  return (\n// //  <ListsContext.Provider value=\n// //  {{ lists: data, loading, error }}>\n// // <ListsContext.Provider value=\n//  //{{ ...state, fetchLists }}> \n//  <ListsContext.Provider value=\n//  {{ ...state, fetchLists, fetchList }}>\n//  {children}\n//  </ListsContext.Provider>\n//  );\n// };\n// export default ListsContext;\nimport { createContext, useCallback, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  lists: [],\n  list: {},\n  loading: true,\n  error: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_LISTS_SUCCESS':\n      return { ...state,\n        lists: action.payload,\n        loading: false\n      };\n\n    case 'GET_LISTS_ERROR':\n      return { ...state,\n        lists: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'GET_LIST_SUCCESS':\n      return { ...state,\n        list: action.payload,\n        loading: false\n      };\n\n    case 'GET_LIST_ERROR':\n      return { ...state,\n        list: {},\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ListsContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchLists = useCallback(async () => {\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists`);\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'GET_LISTS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: 'GET_LISTS_ERROR',\n        payload: e.message\n      });\n    }\n  }, []);\n  const fetchList = useCallback(async listId => {\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}`);\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'GET_LIST_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: 'GET_LIST_ERROR',\n        payload: e.message\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ListsContext.Provider, {\n    value: { ...state,\n      fetchLists,\n      fetchList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListsContextProvider, \"cw2xwzwEV9F1OFaoCjVD5P4GILU=\");\n\n_c = ListsContextProvider;\nexport default ListsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListsContextProvider\");","map":{"version":3,"sources":["C:/Users/saksh/OneDrive/Desktop/task/Chapter5/src/context/ListsContext.js"],"names":["createContext","useCallback","useReducer","ListsContext","initialState","lists","list","loading","error","reducer","state","action","type","payload","ListsContextProvider","children","dispatch","fetchLists","data","fetch","result","json","e","message","fetchList","listId"],"mappings":"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","sourcesContent":["// import { createContext, useCallback,useReducer} from 'react';\r\n// //import useDataFetching from '../hooks/useDataFetching';\r\n// export const ListsContext = createContext();\r\n\r\n//  const initialState = {\r\n//     lists: [],\r\n//     list:{},\r\n//     loading: true,\r\n//     error: '',\r\n//     };\r\n//      const reducer = (state, action) => {\r\n//          switch (action.type) {\r\n//          case 'GET_LISTS_SUCCESS':\r\n//          return {\r\n//          ...state,\r\n//          lists: action.payload,\r\n//          loading: false,\r\n//          };\r\n//          case 'GET_LISTS_ERROR':\r\n//          return {\r\n//         ...state,\r\n//         lists: [],\r\n//          loading: false,\r\n//          error: action.payload,\r\n//          };\r\n\r\n//          case 'GET_LIST_SUCCESS':\r\n//              return {\r\n//              ...state,\r\n//              list: action.payload,\r\n//              loading: false,\r\n//              };\r\n//              case 'GET_LIST_ERROR':\r\n//              return {\r\n//              ...state,\r\n//              list: {},\r\n//              loading: false,\r\n//              error: action.payload,\r\n//  };\r\n//          default:\r\n//         return state;\r\n      \r\n//          }\r\n//          };\r\n//          export const ListsContextProvider = ({ children }) => {\r\n//             const [state, dispatch] = useReducer(reducer, initialState);\r\n//             const fetchLists = useCallback(async () => {\r\n//                try {\r\n//                    const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists`);\r\n//             const result = await data.json();\r\n//             if (result) {\r\n//             dispatch({ type: 'GET_LISTS_SUCCESS', \r\n//             payload: result });\r\n//             }\r\n//             } catch (e) {\r\n//             dispatch({ type: 'GET_LISTS_ERROR', \r\n//             payload: e.message });\r\n//             }\r\n//             }, [])\r\n        \r\n           \r\n\r\n//             //  const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists',\r\n//             //  );\r\n//             const fetchList = useCallback(async (listId) => {\r\n//                  try {\r\n//                  const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}`);\r\n//                  const result = await data.json();\r\n//                  if (result) {\r\n//                  dispatch({ type: 'GET_LIST_SUCCESS',\r\n//                  payload: result });\r\n//                  }\r\n//                  } catch (e) {\r\n//                 dispatch({ type: 'GET_LIST_ERROR', \r\n//                  payload: e.message });\r\n//                  }\r\n//                  }, [])\r\n               \r\n//  return (\r\n// //  <ListsContext.Provider value=\r\n// //  {{ lists: data, loading, error }}>\r\n// // <ListsContext.Provider value=\r\n//  //{{ ...state, fetchLists }}> \r\n\r\n//  <ListsContext.Provider value=\r\n//  {{ ...state, fetchLists, fetchList }}>\r\n//  {children}\r\n//  </ListsContext.Provider>\r\n//  );\r\n// };\r\n// export default ListsContext;\r\nimport { createContext, useCallback, useReducer } from 'react';\r\n\r\nexport const ListsContext = createContext();\r\n\r\nconst initialState = {\r\n  lists: [],\r\n  list: {},\r\n  loading: true,\r\n  error: '',\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'GET_LISTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lists: action.payload,\r\n        loading: false,\r\n      };\r\n    case 'GET_LISTS_ERROR':\r\n      return {\r\n        ...state,\r\n        lists: [],\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'GET_LIST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n        loading: false,\r\n      };\r\n    case 'GET_LIST_ERROR':\r\n      return {\r\n        ...state,\r\n        list: {},\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ListsContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const fetchLists = useCallback(async () => {\r\n    try {\r\n      const data = await fetch(\r\n        `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists`,\r\n      );\r\n      const result = await data.json();\r\n\r\n      if (result) {\r\n        dispatch({ type: 'GET_LISTS_SUCCESS', payload: result });\r\n      }\r\n    } catch (e) {\r\n      dispatch({ type: 'GET_LISTS_ERROR', payload: e.message });\r\n    }\r\n  }, []);\r\n\r\n  const fetchList = useCallback(async (listId) => {\r\n    try {\r\n      const data = await fetch(\r\n        `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}`,\r\n      );\r\n      const result = await data.json();\r\n\r\n      if (result) {\r\n        dispatch({ type: 'GET_LIST_SUCCESS', payload: result });\r\n      }\r\n    } catch (e) {\r\n      dispatch({ type: 'GET_LIST_ERROR', payload: e.message });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ListsContext.Provider value={{ ...state, fetchLists, fetchList }}>\r\n      {children}\r\n    </ListsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ListsContext;\r\n"]},"metadata":{},"sourceType":"module"}