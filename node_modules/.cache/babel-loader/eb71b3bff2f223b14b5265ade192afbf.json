{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Desktop\\\\task\\\\Chapter5\\\\src\\\\context\\\\ItemsContext.js\",\n    _s = $RefreshSig$();\n\n// //import { createContext } from 'react';\n// //import useDataFetching from '../hooks/useDataFetching';\n// import { createContext, useCallback, useReducer } from 'react';\n// export const ItemsContext = createContext();\n// const initialState = {\n//      items: [],\n//      loading: true,\n//      error: '',\n//      };\n//      const reducer = (state, action) => {\n//      switch (action.type) {\n//      case 'GET_ITEMS_SUCCESS':\n//      return {\n//      ...state,\n//      items:  [...state.items, action.payload],\n//      loading: false,\n//      };\n//      case 'GET_ITEMS_ERROR':\n//      return {\n//       ...state,\n//      items: [],\n//      loading: false,\n//      error: action.payload,\n//      };\n//      case 'ADD_ITEM_SUCCESS':\n//       return {\n//         ...state,\n//         items: [...state.items, action.payload],\n//         loading: false,\n//       };\n//      default:\n//     return state;\n//     }\n//      };\n// export const ItemsContextProvider = ({ children }) => {\n// //  const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items',\n// //  );\n// // const [loading, setLoading] = useState(true);\n// //  const [items, setItems] = useState([]);\n// // const [error, setError] = useState('');\n// const [state, dispatch] =\n//  useReducer(reducer, initialState);\n//  const addItem = useCallback(async ({ listId, title,\n//     quantity, price }) => {\n//    const itemId = Math.floor(Math.random() * 100);\n//     try {\n//     const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items`,\n//     {\n//     method: 'POST',\n//     body: JSON.stringify({\n//  id: itemId,\n//     listId,\n//     title,\n//     quantity,\n//     price,\n//     }),\n//     },\n//  );\n//    const result = await data.json();\n//  if (result) {\n//  dispatch({\n//  type: 'ADD_ITEM_SUCCESS',\n//  payload: {\n//  id: itemId,\n//  listId,\n// title,\n//  quantity,\n// price,\n//  },\n//  });\n//  }\n// } catch {}\n//  }, [])\n//  const fetchItems = useCallback(async (listId) => {\n//    try {\n//    const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/\n//    ${listId}/items`);\n//   const result = await data.json();\n//    if (result) {\n//   //  setItems(result);\n//   //  setLoading(false);\n//   dispatch({ type: 'GET_ITEMS_SUCCESS', \n// payload: result });\n// }\n// } catch (e) {\n//   //  setLoading(false);\n//   //  setError(e.message);\n//   dispatch({ type: 'GET_ITEMS_ERROR', \n//   payload: e.message });\n// }\n//    },\n//     [])\n//  return (\n// //  <ItemsContext.Provider value={{ items: data, loading, error }}>\n// /* <ItemsContext.Provider value={{ ...state, fetchItems }}> */\n// <ItemsContext.Provider value=\n// {{ ...state, fetchItems, addItem }}>\n//     {children}\n//  </ItemsContext.Provider>\n//  );\n// };\n// export default ItemsContext;\nimport { createContext, useCallback, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ItemsContext = /*#__PURE__*/createContext();\nconst initialState = {\n  items: [],\n  loading: true,\n  error: ''\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_ITEMS_SUCCESS':\n      return { ...state,\n        items: action.payload,\n        loading: false\n      };\n\n    case 'GET_ITEMS_ERROR':\n      return { ...state,\n        items: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'ADD_ITEM_SUCCESS':\n      return { ...state,\n        items: [...state.items, action.payload],\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ItemsContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchItems = useCallback(async listId => {\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}/items`);\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'GET_ITEMS_SUCCESS',\n          payload: result\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: 'GET_ITEMS_ERROR',\n        payload: e.message\n      });\n    }\n  }, []);\n  const addItem = useCallback(async _ref2 => {\n    let {\n      listId,\n      title,\n      quantity,\n      price\n    } = _ref2;\n    const itemId = Math.floor(Math.random() * 100);\n\n    try {\n      const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items`, {\n        method: 'POST',\n        body: JSON.stringify({\n          id: itemId,\n          listId,\n          title,\n          quantity,\n          price\n        })\n      });\n      const result = await data.json();\n\n      if (result) {\n        dispatch({\n          type: 'ADD_ITEM_SUCCESS',\n          payload: {\n            id: itemId,\n            listId,\n            title,\n            quantity,\n            price\n          }\n        });\n      }\n    } catch {}\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ItemsContext.Provider, {\n    value: { ...state,\n      fetchItems,\n      addItem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemsContextProvider, \"II4QbdWUthrKFjRU81Fs2wNWYy8=\");\n\n_c = ItemsContextProvider;\nexport default ItemsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemsContextProvider\");","map":{"version":3,"sources":["C:/Users/saksh/OneDrive/Desktop/task/Chapter5/src/context/ItemsContext.js"],"names":["createContext","useCallback","useReducer","ItemsContext","initialState","items","loading","error","reducer","state","action","type","payload","ItemsContextProvider","children","dispatch","fetchItems","listId","data","fetch","result","json","e","message","addItem","title","quantity","price","itemId","Math","floor","random","method","body","JSON","stringify","id"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,UAArC,QAAuD,OAAvD;;AAEA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;AAEP,MAAMI,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELJ,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAFT;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELJ,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAJT,OAAP;;AAMF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBK,MAAM,CAACE,OAAxB,CAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAOF;AACE,aAAOG,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,OAAO,MAAMI,oBAAoB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACpD,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBb,UAAU,CAACM,OAAD,EAAUJ,YAAV,CAApC;AAEA,QAAMY,UAAU,GAAGf,WAAW,CAAC,MAAOgB,MAAP,IAAkB;AAC/C,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMC,KAAK,CACrB,2FAA0FF,MAAO,QAD5E,CAAxB;AAGA,YAAMG,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAL,EAArB;;AAEA,UAAID,MAAJ,EAAY;AACVL,QAAAA,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAE,mBAAR;AAA6BC,UAAAA,OAAO,EAAEQ;AAAtC,SAAD,CAAR;AACD;AACF,KATD,CASE,OAAOE,CAAP,EAAU;AACVP,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,iBAAR;AAA2BC,QAAAA,OAAO,EAAEU,CAAC,CAACC;AAAtC,OAAD,CAAR;AACD;AACF,GAb6B,EAa3B,EAb2B,CAA9B;AAeA,QAAMC,OAAO,GAAGvB,WAAW,CAAC,eAA8C;AAAA,QAAvC;AAAEgB,MAAAA,MAAF;AAAUQ,MAAAA,KAAV;AAAiBC,MAAAA,QAAjB;AAA2BC,MAAAA;AAA3B,KAAuC;AACxE,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAf;;AAEA,QAAI;AACF,YAAMb,IAAI,GAAG,MAAMC,KAAK,CACrB,yFADqB,EAEtB;AACEa,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,EAAE,EAAER,MADe;AAEnBX,UAAAA,MAFmB;AAGnBQ,UAAAA,KAHmB;AAInBC,UAAAA,QAJmB;AAKnBC,UAAAA;AALmB,SAAf;AAFR,OAFsB,CAAxB;AAaA,YAAMP,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAL,EAArB;;AAEA,UAAID,MAAJ,EAAY;AACVL,QAAAA,QAAQ,CAAC;AACPJ,UAAAA,IAAI,EAAE,kBADC;AAEPC,UAAAA,OAAO,EAAE;AACPwB,YAAAA,EAAE,EAAER,MADG;AAEPX,YAAAA,MAFO;AAGPQ,YAAAA,KAHO;AAIPC,YAAAA,QAJO;AAKPC,YAAAA;AALO;AAFF,SAAD,CAAR;AAUD;AACF,KA5BD,CA4BE,MAAM,CAAE;AACX,GAhC0B,EAgCxB,EAhCwB,CAA3B;AAkCA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,EAAE,GAAGlB,KAAL;AAAYO,MAAAA,UAAZ;AAAwBQ,MAAAA;AAAxB,KAA9B;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzDM;;GAAMD,oB;;KAAAA,oB;AA2Db,eAAeV,YAAf","sourcesContent":["// //import { createContext } from 'react';\r\n// //import useDataFetching from '../hooks/useDataFetching';\r\n// import { createContext, useCallback, useReducer } from 'react';\r\n// export const ItemsContext = createContext();\r\n// const initialState = {\r\n//      items: [],\r\n//      loading: true,\r\n//      error: '',\r\n//      };\r\n\r\n\r\n//      const reducer = (state, action) => {\r\n//      switch (action.type) {\r\n//      case 'GET_ITEMS_SUCCESS':\r\n//      return {\r\n//      ...state,\r\n//      items:  [...state.items, action.payload],\r\n//      loading: false,\r\n//      };\r\n//      case 'GET_ITEMS_ERROR':\r\n//      return {\r\n//       ...state,\r\n//      items: [],\r\n//      loading: false,\r\n//      error: action.payload,\r\n//      };\r\n\r\n//      case 'ADD_ITEM_SUCCESS':\r\n//       return {\r\n//         ...state,\r\n//         items: [...state.items, action.payload],\r\n//         loading: false,\r\n//       };\r\n   \r\n//      default:\r\n//     return state;\r\n//     }\r\n//      };\r\n     \r\n// export const ItemsContextProvider = ({ children }) => {\r\n// //  const [loading, error, data] = useDataFetching('https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items',\r\n// //  );\r\n// // const [loading, setLoading] = useState(true);\r\n// //  const [items, setItems] = useState([]);\r\n// // const [error, setError] = useState('');\r\n\r\n// const [state, dispatch] =\r\n//  useReducer(reducer, initialState);\r\n\r\n//  const addItem = useCallback(async ({ listId, title,\r\n//     quantity, price }) => {\r\n//    const itemId = Math.floor(Math.random() * 100);\r\n//     try {\r\n//     const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items`,\r\n//     {\r\n//     method: 'POST',\r\n//     body: JSON.stringify({\r\n//  id: itemId,\r\n//     listId,\r\n//     title,\r\n//     quantity,\r\n//     price,\r\n//     }),\r\n//     },\r\n//  );\r\n//    const result = await data.json();\r\n//  if (result) {\r\n//  dispatch({\r\n//  type: 'ADD_ITEM_SUCCESS',\r\n//  payload: {\r\n//  id: itemId,\r\n//  listId,\r\n// title,\r\n//  quantity,\r\n\r\n// price,\r\n//  },\r\n//  });\r\n//  }\r\n// } catch {}\r\n//  }, [])\r\n//  const fetchItems = useCallback(async (listId) => {\r\n//    try {\r\n//    const data = await fetch(`https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/\r\n//    ${listId}/items`);\r\n//   const result = await data.json();\r\n//    if (result) {\r\n//   //  setItems(result);\r\n//   //  setLoading(false);\r\n\r\n//   dispatch({ type: 'GET_ITEMS_SUCCESS', \r\n// payload: result });\r\n// }\r\n// } catch (e) {\r\n//   //  setLoading(false);\r\n//   //  setError(e.message);\r\n//   dispatch({ type: 'GET_ITEMS_ERROR', \r\n//   payload: e.message });\r\n// }\r\n//    },\r\n//     [])\r\n//  return (\r\n// //  <ItemsContext.Provider value={{ items: data, loading, error }}>\r\n// /* <ItemsContext.Provider value={{ ...state, fetchItems }}> */\r\n// <ItemsContext.Provider value=\r\n// {{ ...state, fetchItems, addItem }}>\r\n//     {children}\r\n//  </ItemsContext.Provider>\r\n//  );\r\n// };\r\n// export default ItemsContext;\r\n\r\nimport { createContext, useCallback, useReducer } from 'react';\r\n\r\nexport const ItemsContext = createContext();\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: true,\r\n  error: '',\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'GET_ITEMS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false,\r\n      };\r\n    case 'GET_ITEMS_ERROR':\r\n      return {\r\n        ...state,\r\n        items: [],\r\n        loading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'ADD_ITEM_SUCCESS':\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.payload],\r\n        loading: false,\r\n      };\r\n      \r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ItemsContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const fetchItems = useCallback(async (listId) => {\r\n    try {\r\n      const data = await fetch(\r\n        `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/lists/${listId}/items`,\r\n      );\r\n      const result = await data.json();\r\n\r\n      if (result) {\r\n        dispatch({ type: 'GET_ITEMS_SUCCESS', payload: result });\r\n      }\r\n    } catch (e) {\r\n      dispatch({ type: 'GET_ITEMS_ERROR', payload: e.message });\r\n    }\r\n  }, []);\r\n\r\n  const addItem = useCallback(async ({ listId, title, quantity, price }) => {\r\n    const itemId = Math.floor(Math.random() * 100);\r\n\r\n    try {\r\n      const data = await fetch(\r\n        `https://my-json-server.typicode.com/PacktPublishing/React-Projects-Second-Edition/items`,\r\n        {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            id: itemId,\r\n            listId,\r\n            title,\r\n            quantity,\r\n            price,\r\n          }),\r\n        },\r\n      );\r\n      const result = await data.json();\r\n\r\n      if (result) {\r\n        dispatch({\r\n          type: 'ADD_ITEM_SUCCESS',\r\n          payload: {\r\n            id: itemId,\r\n            listId,\r\n            title,\r\n            quantity,\r\n            price,\r\n          },\r\n        });\r\n      }\r\n    } catch {}\r\n  }, [])\r\n\r\n  return (\r\n    <ItemsContext.Provider value={{ ...state, fetchItems, addItem }}>\r\n      {children}\r\n    </ItemsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ItemsContext;\r\n"]},"metadata":{},"sourceType":"module"}